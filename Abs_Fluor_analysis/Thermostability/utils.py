import matplotlib.pyplot as plt
import numpy as np
import pandas as pd
from pathlib import Path
from scipy.stats import linregress
import seaborn as sns
from typing import List, Dict, Tuple


def rename_columns_fl(data_fl: pd.DataFrame) -> pd.DataFrame:
    """
    Selects and renames the columns of the initially loaded melting curves dataframe as generated by Roche Lightcycler 480
    :param data_fl: pd.DataFrame, as initially read
    :return: pd.DataFrame, with selected renamed columns
    """

    return data_fl[["SamplePos", "SampleName", "Temp", "465-510"]].rename(
        columns={
            "SamplePos": "well",
            "SampleName": "gene",
            "Temp": "temperature",
            "465-510": "signal",
        }
    )


def subtract_blanks_fl(data_fl: pd.DataFrame) -> pd.DataFrame:
    """
    Subtracts blanks from the melting curves dataframe
    :param data_fl: pd.DataFrame, melting curves dataframe with renamed columns
    :return: pd.DataFrame, with blanks subtracted
    """
    blank_temp_df = (
        data_fl[data_fl.gene == "blank"].groupby("temperature", as_index=False).mean()
    )
    for row in blank_temp_df.iterrows():
        temp = row[1]["temperature"]
        sign = row[1]["signal"]
        data_fl.loc[data_fl["temperature"] == temp, "signal"] = (
            data_fl.loc[data_fl["temperature"] == temp, "signal"] - sign
        )

    return data_fl


def filter_extra_fl(data_fl):
    """
    Filters off unneeded rows (blanks + unloaded) from the melting curves dataframe
    :param data_fl: pd.DataFrame, melting curves dataframe with renamed columns and blanks already subtracted
    :return: pd.DataFrame,
    """

    return data_fl[data_fl.gene.str.contains("^(?:(?!blank|Sample))", na=True)]


def subtract_blanks_df(data_df: pd.DataFrame) -> pd.DataFrame:
    """
    Subtracts blanks from the derivative (dFluorescence/dT) of the melting curves dataframe
    :param data_df: pd.DataFrame, dF/dT dataframe
    :return: pd.DataFrame, with blanks subtracted
    """

    return data_df.sub(data_df.filter(regex=r"blank", axis=1).mean(axis=1), axis=0)


def convert_wells2genes(data_df: pd.DataFrame) -> Dict[str, str]:
    """
    Converts wells to genes for the derivative of the melting curves (dFluorescence/dT) dataframe
    :param data_df: pd.DataFrame, dF/dT dataframe
    :return: dict, well : gene
    """
    wells_and_genes_df = data_df.columns[1:].str.extract("(.*): (.*)")
    wells2genes = dict(zip(wells_and_genes_df[0], wells_and_genes_df[1]))

    return wells2genes


def filter_extra_df(data_df: pd.DataFrame) -> pd.DataFrame:
    """
    Filters off unneeded columns (blanks + unloaded + wavelength progressions)
    from the derivative of the melting curves (dFluorescence/dT) dataframe
    :param data_df: pd.DataFrame,  dF/dT dataframe with blanks subtracted
    :return: pd.DataFrame, filtered dataframe
    """

    return data_df.filter(
        regex=r"^(?:(?!X\.\d+|[A-H]\d+: Sample \d+|[A-H]\d+: blank))", axis=1
    )


def reformat_df(data_df: pd.DataFrame) -> pd.DataFrame:
    """
    Unpivots the derivative of the melting curves (dFluorescence/dT) dataframe to long format and renames columns
    :param data_df: pd.DataFrame,  dF/dT dataframe with blanks subtracted
    :return: pd.DataFrame, reformatted dataframe
    """
    data_df = data_df.melt(id_vars=["X"]).rename(
        columns={"X": "temperature", "variable": "gene", "value": "signal"}
    )
    data_df[["well", "gene"]] = data_df["gene"].str.split(": ", expand=True)

    return data_df


def plot_curves(
    data: pd.DataFrame,
    ylabel: str,
    output_fig_name: str,
    output_directory: str = "mean_curves_per_urea",
) -> None:
    """
    Plots the melting or dF/dT curves and saves the figure
    :param data: pd.DataFrame, melting or dF/dT dataframe
    :param ylabel: str, label for the y axis
    :param output_fig_name: str, name of the output figure
    :param output_directory: str, name of the output directory
    :return: None, saves the figure
    """
    plt.figure(figsize=(10, 6))
    sns.lineplot(
        data=data,
        x=data["temperature"],
        y=data["signal"],
        hue="gene",
        legend="brief",
        ci=None,
        palette=sns.hls_palette(17, s=0.4),
    )
    plt.xlabel("Temperature [°C]", fontsize=16)
    plt.legend(frameon=False, bbox_to_anchor=(1, 0.5), loc="center left")
    plt.ylabel(ylabel, fontsize=16)
    plt.savefig(Path(output_directory, f"{output_fig_name}_melting_curves"))


def plot_curves_per_gene(
    data: pd.DataFrame,
    ylabel: str,
    output_fig_name: str,
    output_directory: str = "curves_per_gene",
) -> None:
    """
    Plots the melting or dF/dT curves for each gene separately and saves the figure
    :param data: pd.DataFrame, melting or dF/dT dataframe
    :param ylabel: str, label for the y axis
    :param output_fig_name: str, name of the output figure
    :param output_directory: str, name of the output directory
    :return: None, saves the figure
    """
    # Set of genes
    genes = set(data.gene)

    # Plotting
    plt.figure(figsize=[30, 9], dpi=200)

    for i, gene in enumerate(genes):
        plt.subplot(3, 6, i + 1)
        gene_df = data[data.gene == gene]
        sns.lineplot(
            data=gene_df,
            x=gene_df["temperature"],
            y=gene_df["signal"],
            hue="well",
            legend="brief",
            ci=None,
            palette="mako",
        )
        plt.title(f"cgre{gene}", fontsize=18)
        plt.xlabel("Temperature [°C]", fontsize=16)
        plt.legend(frameon=False, bbox_to_anchor=(1, 0.5), loc="center left")
        plt.ylabel(ylabel, fontsize=16)

    plt.tight_layout()
    plt.savefig(Path(output_directory, f"{output_fig_name}_melting_curves_per_gene"))


def exclude_wells(
    data_fl: pd.DataFrame, data_df: pd.DataFrame, wells2exclude: List[str]
) -> Tuple[pd.DataFrame, pd.DataFrame]:
    """
    Excludes the wells that are outliers from the dataframe
    :param data_fl: pd.DataFrame, melting curves dataframe
    :param data_df: pd.DataFrame, dF/dT dataframe
    :param wells2exclude: list, list of wells to exclude
    :return: Tuple[pd.DataFrame, pd.DataFrame], with wells excluded
    """
    data_fl = data_fl[~data_fl["well"].isin(wells2exclude)].reset_index(drop=True)
    data_df = data_df[~data_df["well"].isin(wells2exclude)].reset_index(drop=True)

    return data_fl, data_df


def normalize_signal_per_well(data: pd.DataFrame) -> pd.DataFrame:
    """
    Normalizes the signal for each well by dividing the maximal observed absorbance for that well
    :param data: pd.DataFrame, with signal column not normalized
    :return: pd.DataFrame, with signal column normalized
    """
    data = data.copy()
    max_abs_by_well = data.groupby("well").max()["signal"].to_dict()
    for well, max_value in max_abs_by_well.items():
        data.loc[data["well"] == well, "signal"] /= max_value

    return data


def plot_melting_curves_per_gene_mean(
    data_fl: pd.DataFrame,
    data_df: pd.DataFrame,
    output_fig_name: str,
    output_directory: str = "curves_per_gene_mean",
) -> Dict[str, float]:
    """
    Plotting the mean of the melting and dF/dT curves for each gene
    :param data_fl: pd.DataFrame, melting curves dataframe
    :param data_df: pd.DataFrame, dF/dT dataframe
    :param output_fig_name: str, name of the output figure
    :param output_directory: str, name of the output directory
    :return: dictionary, gene: melting temperature
    """
    # All genes
    genes = set(data_df.gene)

    # Dictionary for gene: melting_temperature
    melting_temperatures = {}

    # Plotting
    plt.figure(figsize=[30, 9], dpi=200)

    # Choosing palette
    palette = sns.color_palette(
        "mako", n_colors=3
    )  # 0 - melting temperature, 1 - dF/dT curve, 2 - melting curve

    for i, gene in enumerate(genes):
        plot = plt.subplot(3, 6, i + 1)

        # Creating dataframe with data only for one gene
        df_df = data_df[data_df.gene == gene]
        df_fl = data_fl[data_fl.gene == gene]

        # Taking mean over all wells for the gene
        mean_per_gene_df = df_df.groupby(["gene", "temperature"], as_index=False).mean()

        # Index for melting temperature
        i_melt_temp = mean_per_gene_df.groupby("gene").idxmax()["signal"][gene]

        # Taking the melting temperature and appending it to the dictionary
        melting_temperature = mean_per_gene_df.iloc[i_melt_temp, 1]
        melting_temperatures[gene] = melting_temperature

        # According absorbance
        max_absorbance = mean_per_gene_df.iloc[i_melt_temp, 2]

        # dF/dT curve
        sns.lineplot(
            data=df_df,
            x=df_df["temperature"],
            y=df_df["signal"],
            ci=None,
            legend=None,
            ax=plot,
            label="dF/dT",
            color=palette[1],
        )

        # Melting curve
        plot_fl = plot.twinx()
        sns.lineplot(
            data=df_fl,
            x=df_fl["temperature"],
            y=df_fl["signal"],
            ci=None,
            legend="brief",
            ax=plot_fl,
            label="Fluorescence",
            color=palette[2],
        )

        # Line along the melting temperature
        plt.axvline(
            melting_temperature, ymax=0.9, color=palette[0], linestyle="--", linewidth=1
        )

        # Labels
        plt.title(f"cgre{gene}", fontsize=18)
        plot.set_xlabel("Temperature [°C]", fontsize=16)
        plot.set_ylabel("dF/dT", fontsize=16)
        plot_fl.set_ylabel("Fluorescence", fontsize=16)
        plot.set_ylim(0, max_absorbance + max_absorbance * 0.1)

        # Uniting the labels for the melting curves and dF/dT plots into one legend
        lines, labels = plot.get_legend_handles_labels()
        lines2, labels2 = plot_fl.get_legend_handles_labels()
        plot_fl.legend(
            lines + lines2, labels + labels2, loc="center left", frameon=False
        )

    plt.tight_layout()
    plt.savefig(
        Path(output_directory, f"{output_fig_name}_melting_curves_per_gene_mean")
    )

    return melting_temperatures
